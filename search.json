[{"path":[]},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jbkunst@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jkunst.com/celavi/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jkunst.com/celavi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 celavi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jkunst.com/celavi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua Kunst. Author, maintainer.","code":""},{"path":"https://jkunst.com/celavi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kunst J (2022). celavi: Another permuted based feature importance implementation. https://jkunst.com/celavi/, https://github.com/jbkunst/celavi.","code":"@Manual{,   title = {celavi: Another permuted based feature importance implementation},   author = {Joshua Kunst},   year = {2022},   note = {https://jkunst.com/celavi/, https://github.com/jbkunst/celavi}, }"},{"path":"https://jkunst.com/celavi/index.html","id":"celavi","dir":"","previous_headings":"","what":"Another permuted based feature importance implementation","title":"Another permuted based feature importance implementation","text":"goal celavi join main features two functions use really often vip::vi_permute DALEX::model_parts. functions task calculate drop loss via permutation, different features approach. case vip::vi_permute direct use (imho), implementation parallel processing, can used sample_frac parameter. Otherwise, case DALEX::model_parts like user can give custom metrics loss functions, base line full model references values, plots. features added features personal taste. Add progress bars sequential parallel process using progress::progress_bar progressr::progress Give possibility user access raw data. Verbose information using cli::cli_alert_info.","code":""},{"path":"https://jkunst.com/celavi/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Another permuted based feature importance implementation","text":"vip package koalaverse, DALEX package MI². particular links awesome: https://koalaverse.github.io/vip/articles/vip.html https://ema.drwhy.ai/featureImportance.html#featureImportanceR. Please, visit links used awesome tools!","code":""},{"path":"https://jkunst.com/celavi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Another permuted based feature importance implementation","text":"can install development version celavi GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jbkunst/celavi\")"},{"path":"https://jkunst.com/celavi/index.html","id":"example-i-variable-importance","dir":"","previous_headings":"","what":"Example I: Variable Importance","title":"Another permuted based feature importance implementation","text":"compare model.  previous chart can tell random Forest small (better) RMSE less affected terms predictability removing variables, wt variable example.","code":"library(celavi)  lm_model <- lm(mpg ~ ., data = mtcars)  set.seed(123)  vi <- celavi::variable_importance(lm_model, data = mtcars, iterations = 10) #> ℹ Using all variables in data. #> ℹ Trying extract response name using `formula`. #> ℹ Using `mpg` as response. #> ℹ Using root mean square error as loss function. #> ℹ Using `base::identity` as sampler. #> ℹ Using `predict.lm` as predict function.  dplyr::glimpse(vi) #> Rows: 120 #> Columns: 3 #> $ variable  <chr> \"am\", \"am\", \"am\", \"am\", \"am\", \"am\", \"am\", \"am\", \"am\", \"am\", … #> $ iteration <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10… #> $ value     <dbl> 2.718690, 2.813226, 2.629602, 3.006321, 2.810651, 2.780096, …  nrow(vi) #> [1] 120 # nrow(vi) = (ncol(mtcars) - 1 + 2) * iterations  plot(vi) rf <- randomForest::randomForest(mpg ~ ., data = mtcars)  vi_rf <- celavi::variable_importance(rf, data = mtcars, iterations = 10) #> ℹ Using all variables in data. #> ℹ Trying extract response name using `formula`. #> ℹ Using `mpg` as response. #> ℹ Using root mean square error as loss function. #> ℹ Using `base::identity` as sampler. #> ℹ Using `predict.randomForest` as predict function.  plot(vi, vi_rf)"},{"path":"https://jkunst.com/celavi/index.html","id":"example-ii-feature-selection","dir":"","previous_headings":"","what":"Example II: Feature Selection","title":"Another permuted based feature importance implementation","text":"simpler model without loss significance predictive performance. Nopw can compare feature selection techniques. best model terms metrics. see number coefficients: can check loss iteration, can choose combintations loss/number variables want.","code":"set.seed(123)  data(credit_data, package = \"modeldata\")  credit_data <- credit_data[complete.cases(credit_data),] credit_data$Status <- as.numeric(credit_data$Status) - 1  # convert factor to dummies (to compare results with glmnet) credit_data <- as.data.frame(model.matrix(~ . - 1, data = credit_data))  trn_tst <- sample(   c(TRUE, FALSE),   size = nrow(credit_data),   replace = TRUE,    prob = c(.7, .3)   )  credit_data_trn <- credit_data[ trn_tst,] credit_data_tst <- credit_data[!trn_tst,]  fs <- feature_selection(   glm,   credit_data_trn,   response = \"Status\",   stat = min,   iterations = 10,   sample_frac = 1,    predict_function = predict.glm,   # function accepts specific argument for the fit function   family  = binomial ) #> ℹ Using 1 - AUCROC as loss function. #> ℹ Fitting 1st model using 23 predictor variables. #>  #> ── Round #1 ── #>  #> ℹ Using `dplyr::sample_frac` as sampler. #> ℹ Removing 5 variables. Fitting new model with 18 variables. #>  #> ── Round #2 ── #>  #> ℹ Using `dplyr::sample_frac` as sampler. #> ℹ Removing 2 variables. Fitting new model with 16 variables. #>  #> ── Round #3 ── #>  #> ℹ Using `dplyr::sample_frac` as sampler. #> ℹ Removing 1 variables. Fitting new model with 15 variables. #>  #> ── Round #4 ── #>  #> ℹ Using `dplyr::sample_frac` as sampler. #> ℹ Removing 1 variables. Fitting new model with 14 variables. #>  #> ── Round #5 ── #>  #> ℹ Using `dplyr::sample_frac` as sampler.  fs #> # A tibble: 5 × 5 #>   round mean_value values     n_variables variables  #>   <dbl>      <dbl> <list>           <int> <list>     #> 1     1      0.163 <dbl [10]>          23 <chr [23]> #> 2     2      0.163 <dbl [10]>          18 <chr [18]> #> 3     3      0.164 <dbl [10]>          16 <chr [16]> #> 4     4      0.165 <dbl [10]>          15 <chr [15]> #> 5     5      0.166 <dbl [10]>          14 <chr [14]>  plot(fs) mod_fs <- attr(fs, \"final_fit\")  mod_full <- glm(Status ~ ., data = credit_data_trn, family = binomial)  mod_step <- step(mod_full, trace = FALSE)   # wrapper around glmnet::cv.glmnet() mod_lasso <- risk3r::featsel_glmnet(mod_full, plot = FALSE) models <- list(   \"fs by vip\" = mod_fs,   \"stepwise\"  = mod_step,   \"lasso\"     = mod_lasso )  purrr::map_df(   models,   risk3r::model_metrics,   newdata = credit_data_tst,    .id = \"method\" ) #> # A tibble: 3 × 5 #>   method       ks   auc    iv  gini #>   <chr>     <dbl> <dbl> <dbl> <dbl> #> 1 fs by vip 0.530 0.839  1.89 0.679 #> 2 stepwise  0.536 0.842  1.91 0.685 #> 3 lasso     0.527 0.839  1.91 0.679 purrr::map_df(   models,   ~ tibble::tibble(`# variables` =  length(coef(.x))),   .id = \"method\" ) #> # A tibble: 3 × 2 #>   method    `# variables` #>   <chr>             <int> #> 1 fs by vip            15 #> 2 stepwise             18 #> 3 lasso                18 do.call(plot, attr(fs, \"variable_importance\")) +   ggplot2::scale_y_continuous(     breaks = scales::pretty_breaks(7),     sec.axis = ggplot2::dup_axis(~ 1 - .x, name = \"AUC\", labels = scales::percent)   ) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale. fs #> # A tibble: 5 × 5 #>   round mean_value values     n_variables variables  #>   <dbl>      <dbl> <list>           <int> <list>     #> 1     1      0.163 <dbl [10]>          23 <chr [23]> #> 2     2      0.163 <dbl [10]>          18 <chr [18]> #> 3     3      0.164 <dbl [10]>          16 <chr [16]> #> 4     4      0.165 <dbl [10]>          15 <chr [15]> #> 5     5      0.166 <dbl [10]>          14 <chr [14]>"},{"path":"https://jkunst.com/celavi/reference/feature_selection.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature selection via iterative rounds of permuted based feature importance — feature_selection","title":"Feature selection via iterative rounds of permuted based feature importance — feature_selection","text":"Feature selection via iterative rounds permuted based feature importance","code":""},{"path":"https://jkunst.com/celavi/reference/feature_selection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature selection via iterative rounds of permuted based feature importance — feature_selection","text":"","code":"feature_selection(   fit_function = NULL,   data = NULL,   test = data,   response = NULL,   loss_function = NULL,   stat = stats::median,   iterations = 1,   sample_size = NULL,   sample_frac = NULL,   predict_function = NULL,   parallel = FALSE,   ... )"},{"path":"https://jkunst.com/celavi/reference/feature_selection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature selection via iterative rounds of permuted based feature importance — feature_selection","text":"fit_function function formula data arguments fit desired model. data data calculate loss_function. test testing data frame evaluate loss function. default data argument. response Name variable response. loss_function loss function evaluate,  Must function 2 arguments: actual predicted values. Loss function gives smaller value model better performance model. stat Default median. summary function compare values loss variable vs full model. stat value one variable smaller value loss function full model, variable removed round. iterations Number iterations. sample_size Sample size. sample_frac Proportion sample iteration. predict_function Predict function, usually function(model, newdata) returns vector (data frame). parallel logical value indicating process using furrr::future_pmap_dbl purrr::pmap_dbl. ... Specific arguments fit_function.","code":""},{"path":"https://jkunst.com/celavi/reference/variable_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable importance via variable permutations — variable_importance","title":"Variable importance via variable permutations — variable_importance","text":"Variable importance via variable permutations","code":""},{"path":"https://jkunst.com/celavi/reference/variable_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable importance via variable permutations — variable_importance","text":"","code":"variable_importance(   object,   data = NULL,   variables = NULL,   response = NULL,   loss_function = NULL,   iterations = 1,   sample_size = NULL,   sample_frac = NULL,   predict_function = NULL,   parallel = FALSE,   verbose = TRUE )"},{"path":"https://jkunst.com/celavi/reference/variable_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable importance via variable permutations — variable_importance","text":"object model object. data data calculate loss_function. variables Variables use. response Name variable response. loss_function loss function evaluate,  Must function 2 arguments: actual predicted values. Loss function gives smaller value model better performance model. iterations Number iterations. sample_size Sample size. sample_frac Proportion sample iteration. predict_function Predict function, usually function(model, newdata) returns vector (data frame). parallel logical value indicating process using furrr::future_pmap_dbl purrr::pmap_dbl. verbose logical value indicating show progress bars.","code":""},{"path":"https://jkunst.com/celavi/reference/variable_importance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable importance via variable permutations — variable_importance","text":"","code":"lm_model <- lm(mpg ~ ., data = mtcars)  vi <- variable_importance(   lm_model,   response = \"mpg\",   data = mtcars ) #> ℹ Using all variables in data. #> ℹ Using root mean square error as loss function. #> ℹ Using `base::identity` as sampler. #> ℹ Using `predict.lm` as predict function.  plot(vi)"}]
