source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
source("D:/git/celavi/inst/testing-parallel.R")
# object <- nnet::nnet(y ~ ., data = data, size = 7, decay = 0.1, linout = TRUE, maxit = 500)
object <- randomForest::randomForest(y ~ ., data = data, ntrees = 500)
devtools::load_all()
data   <- tibble::as_tibble(vip::gen_friedman(1000, seed = 101))
# object <- nnet::nnet(y ~ ., data = data, size = 7, decay = 0.1, linout = TRUE, maxit = 500)
object <- randomForest::randomForest(y ~ ., data = data, ntrees = 500)
# as.formula(object)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
t1
t2
plot(t1)
library(celavi)
t1
t2
library(ggplot2)
library(patchwork)
plot(t1)
library(celavi)
data   <- tibble::as_tibble(vip::gen_friedman(1000, seed = 101))
# object <- nnet::nnet(y ~ ., data = data, size = 7, decay = 0.1, linout = TRUE, maxit = 500)
object <- randomForest::randomForest(y ~ ., data = data, ntrees = 500)
# as.formula(object)
set.seed(123)
t1 <- system.time({r1 <- variable_importance(object, data, response = "y", iterations = 100)})
set.seed(1234)
t2 <- system.time({r2 <- variable_importance(object, data, response = "y", iterations = 100, parallel = TRUE)})
t1
t2
library(ggplot2)
library(patchwork)
plot(t1)
r1
plot(r1)
plot(r1, r2)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
5+5
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
t1
t2
plot(r1, r2)
r1
r1 |> dplyr::group_by(variable) |> dplyr::summarise_all(mean)
r1 |> dplyr::group_by(variable) |> dplyr::summarise_all(mean)
r1 |> dplyr::group_by(variable) |> dplyr::summarise_all(mean)
r2 |> dplyr::group_by(variable) |> dplyr::summarise_all(mean)
r1 |> dplyr::group_by(variable) |> dplyr::summarise_all(mean)
r2 |> dplyr::group_by(variable) |> dplyr::summarise_all(mean)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
t1
t2
# object <- nnet::nnet(y ~ ., data = data, size = 7, decay = 0.1, linout = TRUE, maxit = 500)
# object <- randomForest::randomForest(y ~ ., data = data, ntrees = 1000)
object <- lm(y ~ ., data = data)
set.seed(123)
t1 <- system.time({r1 <- variable_importance(object, data, response = "y", iterations = 200)})
set.seed(1234)
t2 <- system.time({r2 <- variable_importance(object, data, response = "y", iterations = 200, parallel = TRUE)})
t1
t2
# data --------------------------------------------------------------------
# devtools::load_all()
library(celavi)
fit_function <-  randomForest:::randomForest.formula
fit_function <-  stats::lm
data <- tibble::as_tibble(vip::gen_friedman(1000, seed = 101))
test <- tibble::as_tibble(vip::gen_friedman(1000, seed = 123))
response <- "y"
metric = NULL
stat = median
stat = function(x) quantile(x, .25)
iterations = 100
sample_size = NULL
sample_frac = NULL
predict_function = NULL
parallel = FALSE
... <- NULL
# nnet --------------------------------------------------------------------
x <- feature_selection(
nnet::nnet.formula,
data = data,
test = test,
response = "y",
stat = function(x) quantile(x, 0.25),
iterations = 10,
sample_frac = .1,
size = 7, decay = 0.1, linout = TRUE
)
x
plot(x)
do.call(plot, attr(x, "variable_importance"))
# lm ----------------------------------------------------------------------
x <- feature_selection(
lm,
data = data,
test = test,
response = "y",
# stat = function(x) quantile(x, 0.5),
iterations = 10
# size = 7, decay = 0.1, linout = TRUE
)
x
do.call(plot, attr(x, "variable_importance"))
# ctree -------------------------------------------------------------------
x <- feature_selection(
partykit::ctree,
data = data,
test = test,
response = "y",
# stat = function(x) quantile(x, 0.5),
iterations = 10
# size = 7, decay = 0.1, linout = TRUE
)
x
do.call(plot, attr(x, "variable_importance"))
# ctree -------------------------------------------------------------------
x <- feature_selection(
partykit::ctree,
data = data,
test = test,
response = "y",
# stat = function(x) quantile(x, 0.5),
iterations = 10
)
# ctree -------------------------------------------------------------------
x <- feature_selection(
partykit::ctree,
data = data,
test = test,
response = "y",
iterations = 10
)
x
do.call(plot, attr(x, "variable_importance"))
# randomForest ------------------------------------------------------------
x <- feature_selection(
randomForest:::randomForest.formula,
data = data,
test = test,
response = "y",
# stat = function(x) quantile(x, 0.5),
iterations = 10,
ntree = 10, do.trace = TRUE
)
# randomForest ------------------------------------------------------------
x <- feature_selection(
randomForest:::randomForest.formula,
data = data,
test = test,
response = "y",
stat = function(x) quantile(x, 0.5),
iterations = 10,
ntree = 10, do.trace = TRUE
)
x
x
do.call(plot, attr(x, "variable_importance"))
plot(x)
do.call(plot, attr(x, "variable_importance"))
# MNIST -------------------------------------------------------------------
data <- klassets::mnist_train
data <- dplyr::mutate(data, label = factor(label))
data <- dplyr::sample_n(data, 20000)
test <- klassets::mnist_test
test <- dplyr::mutate(test, label = factor(label))
test <- dplyr::sample_n(test, 2000)
# randomForest ------------------------------------------------------------
x <- feature_selection(
randomForest::randomForest,
data = data,
test = test,
response = "label",
stat = median,
# stat = function(x) quantile(x, .25),
iterations = 25,
sample_frac = .25,
# predict_function = function(object, newdata){ranger:::predict.ranger(object, data = newdata)$predictions},
# predict_function = DALEX::yhat,
parallel = TRUE,
ntrees = 50
)
# randomForest ------------------------------------------------------------
x <- feature_selection(
function(formula, data) randomForest::randomForest(formula, data = data),
data = data,
test = test,
response = "label",
stat = median,
# stat = function(x) quantile(x, .25),
iterations = 25,
sample_frac = .25,
# predict_function = function(object, newdata){ranger:::predict.ranger(object, data = newdata)$predictions},
# predict_function = DALEX::yhat,
parallel = TRUE,
ntrees = 50
)
data
test
# MNIST -------------------------------------------------------------------
data <- klassets::mnist_train
remotes::install_github("jbkunst/klassets")
remotes::install_github("jbkunst/klassets")
# MNIST -------------------------------------------------------------------
data <- klassets::mnist_train
data <- dplyr::mutate(data, label = factor(label))
data <- dplyr::sample_n(data, 20000)
test <- klassets::mnist_test
test <- dplyr::mutate(test, label = factor(label))
test <- dplyr::sample_n(test, 2000)
# randomForest ------------------------------------------------------------
x <- feature_selection(
function(formula, data) randomForest::randomForest(formula, data = data),
data = data,
test = test,
response = "label",
stat = median,
# stat = function(x) quantile(x, .25),
iterations = 25,
sample_frac = .25,
# predict_function = function(object, newdata){ranger:::predict.ranger(object, data = newdata)$predictions},
# predict_function = DALEX::yhat,
parallel = TRUE,
ntrees = 50
)
# randomForest ------------------------------------------------------------
x <- feature_selection(
function(formula, data, ...) randomForest::randomForest(formula, data = data, ...),
data = data,
test = test,
response = "label",
stat = median,
# stat = function(x) quantile(x, .25),
iterations = 25,
sample_frac = .25,
# predict_function = function(object, newdata){ranger:::predict.ranger(object, data = newdata)$predictions},
# predict_function = DALEX::yhat,
parallel = TRUE,
ntrees = 50
)
# randomForest ------------------------------------------------------------
x <- feature_selection(
function(formula, data, ...) randomForest::randomForest(formula, data = data, ...),
data = data,
test = test,
response = "label",
stat = median,
# stat = function(x) quantile(x, .25),
iterations = 25,
sample_frac = .25,
# predict_function = function(object, newdata){ranger:::predict.ranger(object, data = newdata)$predictions},
# predict_function = DALEX::yhat,
parallel = TRUE,
ntrees = 50, do.trace = TRUE
)
# randomForest ------------------------------------------------------------
x <- feature_selection(
function(formula, data, ...) randomForest::randomForest(formula, data = data, ...),
data = data,
test = test,
response = "label",
stat = median,
# stat = function(x) quantile(x, .25),
iterations = 25,
sample_frac = .25,
# predict_function = function(object, newdata){ranger:::predict.ranger(object, data = newdata)$predictions},
# predict_function = DALEX::yhat,
parallel = TRUE,
ntree = 50, do.trace = TRUE
)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
t1
t2
cadenas <- c("2018-11", "2018-12", "2018-2",  "2018-3",  "2018-4",  "2018-5",
"2018-6" , "2018-7",  "2018-8",  "2018-9",  "2019-1",  "2019-10",
"2019-11", "2019-12", "2019-2",  "2019-3",  "2019-4",  "2019-5",
"2019-6", "2019-7", "2019-8", "2019-9",  "2020-1",  "2020-10",
"2020-11", "2020-12", "2020-2",  "2020-3")
library(tidyverse)
library(lubridate) # fechas
dfcadenas <- tibble(cadena = cadenas)
dfcadenas
dfcadenas |>
mutate(cadena_fecha = str_c(cadena, "1", sep = "-")))
dfcadenas |>
mutate(cadena_fecha = str_c(cadena, "1", sep = "-"))
dfcadenas |>
mutate(
cadena_fecha = str_c(cadena, "1", sep = "-"),
fecha  = ymd(cadena_fecha)
)
dfcadenas
# filtrar
dfcadenas
# filtrar
dfcadenas |>
filter(fecha >= ymd(20200201))
dfcadenas <- dfcadenas |>
mutate(
cadena_fecha = str_c(cadena, "1", sep = "-"),
fecha  = ymd(cadena_fecha)
)
# filtrar
dfcadenas |>
filter(fecha >= ymd(20200201))
dfcadenas_filtradas
# filtrar
dfcadenas_filtradas <- dfcadenas |>
filter(fecha >= ymd(20200201))
dfcadenas_filtradas
source("D:/git/celavi/inst/testing-parallel.R", echo=TRUE)
